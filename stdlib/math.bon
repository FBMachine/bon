cdef pow(b:float, e:float) -> float
cdef sqrt(x:float) -> float
cdef sin(x:float) -> float
cdef cos(x:float) -> float
cdef log(x:float) -> float
cdef fabs(x:float) -> float
cdef abs(x:int) -> int
cdef float_to_string(val:float) -> string
cdef int_to_string(val:int) -> string
cdef float_to_int(val:float) -> int
cdef int_to_float(val:int) -> float

def operator**(a,n)
    pow(a, n)
end

class Num<T>
  def unary-(x:T)->T;
end

impl Num<float>
  def unary-(x)
      0.0 - x
  end
end

impl Num<int>
  def unary-(x)
      0 - x
  end
end

impl BoundsCheck<int>
  def out_of_bounds(template:int) -> int
    template
    return 0
  end
end

impl Integer<float>
  def to_integer(x:float) -> int
    float_to_int(x)
  end
end

impl Float<int>
  def to_float(x:int) -> float
    int_to_float(x)
  end
end
